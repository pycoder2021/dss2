	
	Practical No-1
#Sum no1
import sys
x1=int(input('Input The Value :'))
if x1 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
w1=-1
t=w1*x1
print(t)
tr_val=0
if t>=tr_val:
    print('output =1')
else:
    print('output =0')

############
#Sum no 2
import sys
x1=int(input('Input The First Value :'))
x2=int(input('Input The Second Value :'))
if x1 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
if x2 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
w1=1
w2=1
b=-1
t=w1*x1+w2*x2+b
print(t)
tr_val=0
if t>=tr_val:
    print('output =1')
else:
    print('output =0')
##########
#Sum no 3
import sys
x1=int(input('Input The First Value :'))
x2=int(input('Input The Second Value :'))
if x1 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
if x2 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
w1=1
w2=1
b=-2
t=w1*x1+w2*x2+b
print(t)
tr_val=0
if t>=tr_val:
    print('output =1')
else:
    print('output =0')
##########
#Sum no 4
import sys
x1=int(input('Input The First Value :'))
x2=int(input('Input The Second Value :'))
if x1 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
if x2 not in [0,1]:
    sys.exit('Wrong input ,it should be 1/0')
w1=1
w2=1
b=1
t=w1*x1+w2*x2+b
print(t)
tr_val=0
if t>=tr_val:
    print('output =1')
else:
    print('output =0')





	Practical No-2
vector=[]
input_vector=int(input('Enter the Number of inputs : '))
for i in range(input_vector):
    vector.append(list(map(float,input(f'Enter the input-{i} : ').strip().split())))
output=list(map(float,input(f'Enter the output : ').strip().split()))
weight=list(map(float,input(f'Enter the weights : ').strip().split()))
n=float(input('Enter the learning rate : '))
bias=float(input('Enter the bias : '))

for i in range(len(vector[0])):
    for j in range(input_vector):
        weight[j]=weight[j]+n*output[i]*vector[j][i]
    bias=bias+n*output[i]
    print('--------------------')
    print(f'For input-{i} : ')
    print(f'weight : {weight}')
    print(f'bias : {bias}')





	Practical No-3
def calculate(l,e):
    total=sum(l)
    u_l=[]
    for i in l:
        n_w=i-(e*(total-i))
        if n_w < 0:
            n_w=0
        u_l.append(n_w)
    return u_l

def check_active(l):
    p=0
    loc=0
    n=0
    for i in range(len(l)):
        if l[i] > 0:
            p=p+1
            loc=i+1
        else:
            n=n+1
    if (p==1):
        return loc
    else:
        return 0

w = list(map(float,input('Enter the initial values of activations one by one separated by space :').strip().split()))
n=len(w)
tmp_e=1/n
e=float(input('Input the epsilon value (Skip it if no epsilon is given) : ') or tmp_e)
k=0
print(f'Initial values of activations : {w}')
while(1):
    w=calculate(w,e)
    k=k+1
    print(f'Iteration {k} : {w}')
    c=check_active(w)
    if(c):
        print('Winning neuron is : '+str(c))
        break





	Practical No-4
import numpy as np

input_vector_number=int(input('Enter the number of input vectors : '))
exemplar_vector_number=int(input('Enter the number of exemplar vectors : '))
input_vector=[]
exemplar_vector=[]
exemplar_vector_update=[]
for i in range(input_vector_number):
    input_vector.append(np.array(input(f'Enter the elements of Input[{i}] : ').strip().split(),int))
for i in range(exemplar_vector_number):
    exemplar_vector.append(np.array(input(f'Enter the elements of Exemplar[{i}] : ').strip().split(),int))

B=input_vector_number/2
b=np.array(B)
for i in range(0,exemplar_vector_number):
    exemplar_vector_update.append(exemplar_vector[i]/2)
print('Initial weights are : ')
for i in range(0,exemplar_vector_number):
        print(f'W[{i}]',end='        ')
print('\n')
for j in range(0,len(exemplar_vector[0])):
    for i in range(exemplar_vector_number):
        print(f' {exemplar_vector_update[i][j]}',end='          ')
    print('\n')

for i in range(input_vector_number):
    y=[]
    print(f'For Input vector {i}: ')
    for j in range(exemplar_vector_number):
        k=np.matmul(input_vector[i],exemplar_vector_update[j].T)
        y.append(np.add(k,b))
        print(f'Value of Y[{j}]={y[j]}')
    min_in=y.index(max(y))
    print(f'Y[{min_in}] has the best exemplar for Input vector {i}')




	Practical No-5
def distance(W,X):
    D=0
    for i in range(0,len(W)):
        D=D+pow((W[i]-X[i]),2)
    D=round(D,2)
    return D

def update_weight(W,R,X):
    U_W=[]
    for i in range(0,len(W)):
        U_W.append(W[i]+(R*(X[i]-W[i])))
    return U_W

def print_weight(W,w_n):
    for i in range(0,w_n):
        print(f'W[{i}]={W[i]}')

def print_input(X,v):
    for i in range(0,v):
        print(f'X[{i}]={X[i]}')

W=[]
w_n=int(input('Input the number of weight vectors : '))
for i in range(0,w_n):
    w_i=list(map(float,input(f'Enter the weights of {i} weight vector : ').strip().split()))
    W.append(w_i)

X=[]
v=int(input('Input the number of input vectors : '))
for i in range(0,v):
    x_i=list(map(float,input(f'Enter the inputs of {i} input vector : ').strip().split()))
    X.append(x_i)

L_R=float(input('Enter the learning rate : '))

print('Initial Weights : ')
print_weight(W,w_n)
print('Initial Input Vectors : ')
print_input(X,v)

k=w_n
if (k==len(X[0])):
    p=[]
    for i in range(0,len(W[0])):
        l=[]
        for j in range(0,k):
            l.append(W[j][i])
        p.append(l)
    W=[]
    for i in range(0,len(p)):
        W.append(p[i])
    w_n=len(W)
 
D=[None]*w_n
for j in range(0,v):
    for i in range(0,w_n):
        D[i]=distance(W[i],X[j])
    min_d=D.index(min(D))
    W[min_d]=update_weight(W[min_d],L_R,X[j])

if (k==len(X[0])):
    q=[]
    for i in range(0,len(W[0])):
        l=[]
        for j in range(0,len(W)):
            l.append(W[j][i])
        q.append(l)
    W=[]
    for i in range(0,len(q)):
        W.append(q[i])
    w_n=len(W)

print('Final Weights : ')
print_weight(W,w_n)




	Practical No-6
from turtle import shape
import numpy as np

input_number=int(input('Enter the number of inputs : '))
target_number=input_number
input_vector=[]
target_vector=[]
for i in range(input_number):
    input_vector.append(list(map(int,input(f'Enter the elements of Input[{i}] : ').strip().split())))
for i in range(target_number):
    target_vector.append(list(map(int,input(f'Enter the elements of Target[{i}] : ').strip().split())))

r=len(input_vector[0])
c=len(target_vector[0])
W=np.zeros([])
for i in range(input_number):
    input_vector_T=np.array([input_vector[i]]).T
    target_vector_A=np.array([target_vector[i]])
    W=W+np.matmul(input_vector_T,target_vector_A)

print('Final weight for X will be : ')
print(W)
print('Final weight for Y will be : ')
print(W.T)




	Practical No-7
def union(A,B):
    R=[]
    for i in range(0,len(A)):
        if(A[i]>B[i]):
            R.append(A[i])
        else:
            R.append(B[i])
    return R

def intersect(A,B):
    R=[]
    for i in range(0,len(A)):
        if(A[i]<B[i]):
            R.append(A[i])
        else:
            R.append(B[i])
    return R

def complement(A):
    R=[]
    for i in range(0,len(A)):
        V=1-A[i]
        R.append(V)
    return R

def diff(A,B):
    COM_B=complement(B)
    R=[]
    for i in range(0,len(A)):
        if(A[i]<COM_B[i]):
            R.append(A[i])
        else:
            R.append(COM_B[i])
    return R 

def print_fuzzy_set(A,W):
    for i in range(0,len(A)-1):
        print(f'{round(A[i],2)}/{round(W[i],1)}',end=' + ')
    print(f'{round(A[-1],2)}/{round(W[-1],1)}')


A=list(map(float,input('Enter the values of first fuzzy set : ').strip().split()))
B=list(map(float,input('Enter the values of second fuzzy set : ').strip().split()))
W=list(map(int,input('Enter the weights of each element for the fuzzy set : ').strip().split()))
OP=float(input('1.Union\n2.Intersection\n3.Complement\n4.Difference\nEnter the operation which need to be performed from above:'))

print('The first fuzzy set is :')
print_fuzzy_set(A,W)
print('The second fuzzy set is :')
print_fuzzy_set(B,W)

if (OP==1):
    R=union(A,B)
    print('The union of first and second set is :')
    print_fuzzy_set(R,W)
elif (OP==2):
    R=intersect(A,B)
    print('The intersect of first and second set is :')
    print_fuzzy_set(R,W)
elif (OP==3):
    R=complement(A)
    print('The complement of first fuzzy set is :')
    print_fuzzy_set(R,W)
    R=complement(B)
    print('The complement of second fuzzy set is :')
    print_fuzzy_set(R,W)
elif (OP==4):
    R=diff(A,B)
    print('The differnce of first and second set is :')
    print_fuzzy_set(R,W)
else:
    print('Please select any valid number : 1,2,3,4')
    exit()






	Practical No-8
import numpy as np

def cartesian_product_of_two_sets(A,B):
    val=[]
    for i in range(0,len(A)):
        for j in range(0,len(B)):
            if A[i]<B[j]:
                val.append(A[i])
            else:
                val.append(B[j])
    mat=np.array(val).reshape(len(A),len(B))
    return mat

def print_fuzzy_set(A,W):
    for i in range(0,len(A)-1):
        print(f'{round(A[i],2)}/{round(W[i],1)}',end=' + ')
    print(f'{round(A[-1],2)}/{round(W[-1],1)}')

A=list(map(float,input('Enter the values of first fuzzy set : ').strip().split()))
B=list(map(float,input('Enter the values of second fuzzy set : ').strip().split()))
W1=list(map(int,input('Enter the weights of each element for the first fuzzy set : ').strip().split()))
W2=list(map(int,input('Enter the weights of each element for the second fuzzy set : ').strip().split()))

print('The first fuzzy set is :')
print_fuzzy_set(A,W1)
print('The second fuzzy set is :')
print_fuzzy_set(B,W2)

print('The cartesian product of first and second fuzzy set is : \n')
R=cartesian_product_of_two_sets(A,B)
print(f'____|_____{W2[0]}______',end='|')
for i in range(1,len(W2)-1):
    print(f'_____{W2[i]}______',end='|')
print(f'_____{W2[-1]}_____')

for i in range(0,R.shape[0]-1):
    print(f'{W1[i]}  ',end='|')
    for j in range(0,R.shape[1]):
        print(f'____{R[i][j]}_____',end='|')
    print('\n')

print(f'{W1[-1]} ',end='|')
for i in range(0,R.shape[1]):
    print(f'_____{R[-1][i]}____',end='|')
print('\n')







	Practical No-9
import numpy as np

# Max-Min Composition 

def maxMin(x,y):
    z = []
    for x1 in x:
        for y1 in y.T:
            z.append(max(np.minimum(x1,y1)))
    return np.array(z).reshape((x.shape[0], y.shape[1]))

# Max-Product Composition given by Rosenfeld

def maxProduct(x,y):
    z = []
    for x1 in x:
        for y1 in y.T:
            z.append(max(np.multiply(x1,y1)))
    return np.array(z).reshape((x.shape[0], y.shape[1]))

# 2 arrays for the example

r = np.array([[0.6,0.3],[0.2,0.9]])
s = np.array([[1,0.5,0.3],[0.8,0.4,0.7]])

print("R1oR2 => Max-Min :\n" + str(maxMin(r,s)) + "\n")
print("R1oR2 => Max-Product :\n" + str(maxProduct(r,s)) + "\n\n")

##########
import numpy as np

# Max-Min Composition 

def maxMin(x,y):
    z = []
    for x1 in x:
        for y1 in y.T:
            z.append(max(np.minimum(x1,y1)))
    return np.array(z).reshape((x.shape[0], y.shape[1]))


# 2 arrays for the example

r = np.array([[0.2,0.3,0.4,0.4,0.4,0.2],[0.2,0.3,0.6,0.6,0.6,0.2],[0.2,0.3,0.6,0.8,1.0,0.2,],[0.1,0.1,0.1,0.1,0.1,0.1,]])
s = np.array([[0.2,0.2,0.2,0.2],[0.3,0.3,0.3,0.25],[0.35,0.6,0.6,0.25],[0.35,0.67,0.8,0.25],[0.35,0.67,0.97,0.25],[0.2,0.2,0.2,0.2]])


print("R1oR2 => Max-Min :\n" + str(maxMin(r,s)) + "\n")






